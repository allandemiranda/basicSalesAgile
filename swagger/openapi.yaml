openapi: "3.0.3"
info:
  version: "0.2.1"
  title: "Front-end Technical Exercise"
  contact:
    email: "allandemiranda@gmail.com"
servers:
  - url: https://localhost:5000/api
tags:
  - name: "Auth"
    description: "User authentication"
  - name: "User"
    description: "Users from the system"
  - name: "Sale"
    description: "Sales from the Users"
  - name: "Product"
    description: "Products to sales"  
paths:
  /auth/local:
    post:
      tags:
        - "Auth"
      summary: "Local login user"
      description: ""
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: "string"
                  description: "User Name"
                password:
                  type: "string"
                  description: "Password"
              required:
                - user_name
                - password
      responses:
        "200":
          description: "Token and user object"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    items:
                      $ref: "#/components/schemas/User"
                  token:
                    type: string
        "400":
          description: "Missing request or parameters"
        "401":
          description: "Bad parameters"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
  /user:
    post:
      tags:
        - "User"
      summary: "Create user"
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: "string"
                  description: "Full name"
                phone:
                  type: "string"
                  description: "Phone number"
                user_name:
                  type: "string"
                  description: "Login name"
                password:
                  type: "string"
                  description: "Password user"
              required:
                - name
                - phone
                - user_name
                - password
      responses:
        "201":
          description: "A user object."
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    items:
                      $ref: "#/components/schemas/User"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
  /user/{user_id}:
    get:
      tags:
        - "User"
      summary: "Get a specific user"
      description: ""
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to return
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "A user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    items:
                      $ref: "#/components/schemas/User"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
      security:
        - bearerAuth: []
  /user/{user_id}/sales/:
    get:
      tags:
        - "User"
      summary: "Get sales from user"
      description: ""
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to return
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "A sales arry."
          content:
            application/json:
              schema:
                type: object
                properties:
                  sales:
                    type: array
                    items:
                      $ref: "#/components/schemas/Sale"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
      security:
        - bearerAuth: []
  /topUsers/:
    get:
      tags:
        - "User"
      summary: "Get a Top 5 users"
      description: ""
      responses:
        "200":
          description: "Top 5 users"
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
      security:
        - bearerAuth: []
  /users/:
    get:
      tags:
        - "User"
      summary: "Get users"
      description: ""
      responses:
        "200":
          description: "The users"
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "500":
          description: "Server error"
        default:
          description: "Unexpected error"
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int"
        name:
          type: "string"
          description: "Full name"
        phone:
          type: "string"
          description: "Phone number"
        user_name:
          type: "string"
          description: "Login name"
      xml:
        name: "User"
    Sale:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int"
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          type: "integer"
          format: "int"
          description: "Quantity of products bought"
        total:
          type: "number"
          format: "float"
          description: "Total bought"
        date:
          type: "string"
          description: "Date bought"
        user:
          $ref: "#/components/schemas/User"
      xml:
        name: "Sale"
    Product:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int"
        name:
          type: "string"
          description: "name of product"
        value:
          type: "number"
          format: "float"
          description: "Value of product"
      xml:
        name: "Product"
